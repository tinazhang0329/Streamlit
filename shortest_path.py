{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "414b70c6-8079-4bab-92f7-c62c4cd52d5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import networkx as nx\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Default distances between towns as edges in a graph\n",
    "def get_default_edges():\n",
    "    return [\n",
    "        ('Chicago', 'McLain', 40), ('Chicago', 'Aurora', 60), ('Chicago', 'Parker', 50),\n",
    "        ('McLain', 'Aurora', 10), ('McLain', 'Smallville', 70),\n",
    "        ('Aurora', 'Parker', 20), ('Aurora', 'Smallville', 55), ('Aurora', 'Farmer', 40),\n",
    "        ('Parker', 'Farmer', 50),\n",
    "        ('Smallville', 'Farmer', 10), ('Smallville', 'Bayview', 60),\n",
    "        ('Farmer', 'Bayview', 80)\n",
    "    ]\n",
    "\n",
    "st.title(\"üöó üöó Shortest Route from Chicago to Bayview\")\n",
    "\n",
    "st.sidebar.header(\"üîß Customize Weights\")\n",
    "\n",
    "# Editable distance table\n",
    "edge_df = pd.DataFrame(get_default_edges(), columns=['From', 'To', 'Distance'])\n",
    "edited_df = st.sidebar.data_editor(edge_df, num_rows=\"dynamic\", key=\"edit_distances\")\n",
    "\n",
    "# Graph generation\n",
    "g = nx.DiGraph()\n",
    "for _, row in edited_df.iterrows():\n",
    "    g.add_edge(row['From'], row['To'], weight=row['Distance'])\n",
    "\n",
    "# Select cost type\n",
    "cost_type = st.selectbox(\"Select what the weights represent:\",\n",
    "                         [\"Miles\", \"Cost in Dollars\", \"Time in Minutes\"])\n",
    "\n",
    "# Shortest path\n",
    "try:\n",
    "    path = nx.dijkstra_path(g, 'Origin', 'Destination', weight='weight')\n",
    "    distance = nx.dijkstra_path_length(g, 'Origin', 'Destination', weight='weight')\n",
    "    st.success(f\"Shortest Path from Chicago to Bayview ({cost_type}): {' ‚ûú '.join(path)}\")\n",
    "    st.write(f\"**Total {cost_type}: {distance}**\")\n",
    "except nx.NetworkXNoPath:\n",
    "    st.error(\"No valid path from Chicago to Bayview based on current graph.\")\n",
    "\n",
    "# Visualize the graph\n",
    "st.subheader(\"üó∫Ô∏è Town Network Chart\")\n",
    "fig, ax = plt.subplots()\n",
    "pos = nx.spring_layout(g, seed=42)\n",
    "nx.draw(g, pos, with_labels=True, node_color='lightblue', node_size=1500, font_size=10, ax=ax)\n",
    "labels = nx.get_edge_attributes(g, 'weight')\n",
    "nx.draw_networkx_edge_labels(g, pos, edge_labels=labels, ax=ax)\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Download editable data\n",
    "csv = edited_df.to_csv(index=False).encode('utf-8')\n",
    "st.download_button(\"üì• Download Distance Table as CSV\", csv, \"distances.csv\", \"text/csv\")\n",
    "\n",
    "# Show adjacency matrix\n",
    "st.subheader(\"üìã Adjacency Table\")\n",
    "nodes = sorted(set(edited_df['From']) | set(edited_df['To']))\n",
    "mat = pd.DataFrame(index=nodes, columns=nodes)\n",
    "for _, row in edited_df.iterrows():\n",
    "    mat.at[row['From'], row['To']] = row['Distance']\n",
    "st.dataframe(mat.fillna(\"--\"))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
